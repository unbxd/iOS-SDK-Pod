// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Unbxd
import Foundation
import Swift
import SystemConfiguration
import UIKit
@_exported import Unbxd
@_hasMissingDesignatedInitializers public class QueryAbstract {
  public var responseFormat: Unbxd.ResponseFormat
  public var pageIndex: Swift.Int?
  public var rowsCount: Swift.Int?
  public var variant: Unbxd.Variant?
  public var spellCheck: Swift.Bool
  public var analytics: Swift.Bool
  public var showStatsForField: Swift.String?
  public var version: Swift.String
  public var personalization: Swift.Bool?
  public var facet: Unbxd.Facet?
  public var fields: Swift.Array<Swift.String>?
  public var filter: Unbxd.FilterAbstract?
  public var categoryFilter: Unbxd.CategoryFilterAbstract?
  public var multipleFilter: Unbxd.MultipleFilterAbstract?
  public var fieldsSortOrder: Swift.Array<Unbxd.FieldSortOrder>?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnalyticsAbstract {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SearchAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, searchKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryPageAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, categoryPages: Unbxd.CategoryPathAbstract, pageType: Unbxd.PageType)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProductClickAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, pID: Swift.String, query: Swift.String? = nil, pageId: Swift.String? = nil, boxType: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProductClickAnalyticsV2 : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, pID: Swift.String, query: Swift.String? = nil, pageId: Swift.String? = nil, pageType: Unbxd.RecsV2PageType? = nil, widget: Unbxd.Widget? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProductAddToCartAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, productID: Swift.String, variantId: Swift.String, quantity: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProductOrderAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, productID: Swift.String, price: Swift.Double, quantity: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProductDisplayPageViewAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, skuId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CartRemovalAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, skuId: Swift.String, variantId: Swift.String, quantity: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AutoSuggestAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, skuId: Swift.String, query: Swift.String, docType: Swift.String? = nil, internalQuery: Swift.String? = nil, fieldValue: Swift.String? = nil, fieldName: Swift.String? = nil, sourceField: Swift.String? = nil, unbxdPrank: Swift.Int? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RecommendationWidgetAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, recommendationType: Unbxd.RecommendationType, productIds: Swift.Array<Swift.String>)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RecommendationWidgetAnalyticsV2 : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, pageType: Unbxd.RecsV2PageType, widget: Unbxd.Widget? = nil, identifier: Swift.String? = nil, productIds: Swift.Array<Swift.String>? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SearchImpressionAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, query: Swift.String, productIds: Swift.Array<Swift.String>)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryPageImpressionAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, categoryPages: Unbxd.CategoryPathAbstract, pageType: Unbxd.PageType, productIds: Swift.Array<Swift.String>)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DwellTimeAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, productID: Swift.String, dwellTime: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FacetAnalytics : Unbxd.AnalyticsAbstract {
  public init(uid: Swift.String, visitType: Swift.String, requestId: Swift.String, searchQuery: Swift.String, facetFields: Unbxd.FilterAbstract)
  @objc deinit
}
public enum UbError : Swift.Int, Swift.Error {
  case NetworkUnReachable, RequestTimeOut, FailedComposingUrl, EmptyResponse, FailedEncodingUrl, FailedParsingResponse
  public var errorMessage: Swift.String {
    get
  }
  public var _code: Swift.Int {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BrowseQuery : Unbxd.QueryAbstract {
  public var browseCategoryQuery: Unbxd.CategoryAbstract?
  public var pageType: Unbxd.PageType?
  public init(categoryQuery: Unbxd.CategoryAbstract, pageType: Unbxd.PageType? = nil, rows: Swift.Int? = nil, start: Swift.Int? = nil, format: Unbxd.ResponseFormat = .JSON, spellCheck: Swift.Bool = false, analytics: Swift.Bool = false, statsField: Swift.String? = nil, variant: Unbxd.Variant? = nil, fields: Swift.Array<Swift.String>? = nil, facet: Unbxd.Facet? = nil, filter: Unbxd.FilterAbstract? = nil, categoryFilter: Unbxd.CategoryFilterAbstract? = nil, multipleFilter: Unbxd.MultipleFilterAbstract? = nil, fieldsSortOrder: Swift.Array<Unbxd.FieldSortOrder>? = nil, personalization: Swift.Bool? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryAbstract {
  @objc deinit
}
@_inheritsConvenienceInitializers public class CategoryFieldsAbstract : Unbxd.CategoryAbstract {
  public init()
  @objc deinit
}
public class CategoryIdField : Unbxd.CategoryFieldsAbstract {
  public init(field: Swift.String, value: Swift.String)
  @objc deinit
  override public init()
}
public class CategoryNameField : Unbxd.CategoryFieldsAbstract {
  public init(field: Swift.String, value: Swift.String)
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CategoryPathAbstract : Unbxd.CategoryAbstract {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryNamePath : Unbxd.CategoryPathAbstract {
  public init(path: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AsynchronousOperation : Foundation.Operation {
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
  }
  public func completeOperation()
  @objc override dynamic public func start()
  @objc override dynamic public func main()
  @objc deinit
  @objc override dynamic public init()
}
extension Client {
  public func search(query: Unbxd.SearchQuery, completion: @escaping Unbxd.CompletionHandler)
  public func browse(query: Unbxd.BrowseQuery, completion: @escaping Unbxd.CompletionHandler)
  public func autoSuggest(query: Unbxd.AutoSuggestQuery, completion: @escaping Unbxd.CompletionHandler)
  public func track(analyticsDetails: Unbxd.AnalyticsAbstract, completion: @escaping Unbxd.CompletionHandler)
  public func recommend(recommendationQuery: Unbxd.RecommendationQuery, completion: @escaping Unbxd.CompletionHandler)
  public func search(productId: Swift.String, completion: @escaping Unbxd.CompletionHandler)
  public func userId() -> Unbxd.UserId
}
public enum ResponseFormat : Swift.String {
  case JSON, XML
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum Facet {
  case Selected(Unbxd.FilterAbstract), MultiSelect, MultiLevel
}
public enum ReferenceType {
  case None, TypeId, TypeName
  public static func == (a: Unbxd.ReferenceType, b: Unbxd.ReferenceType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum FilterOperatorType {
  case None, AND, OR
  public static func == (a: Unbxd.FilterOperatorType, b: Unbxd.FilterOperatorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum SortOrder : Swift.String {
  case None, ASC, DSC
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum CategoryType {
  case None, Path, Fields
  public static func == (a: Unbxd.CategoryType, b: Unbxd.CategoryType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum DocType : Swift.String {
  case INFIELD, POPULARPRODUCTS, TOPSEARCHQUERIES, KEYWORDSUGGESTION, PROMOTED_SUGGESTIONS
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalyticsActionType : Swift.String {
  case None, Visitor, SearchHit, CategoryPageHit, ProductClick, AddToCart, Order, ProductPageView, CartRemoval, RecommendationWidgetImpression, SearchImpression, CategoryPageImpression, Dwelltime, Facets
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RecommendationType : Swift.String {
  case None, RecommendedForYou, RecentlyViewed, MoreLikeThis, ViewerAlsoViewed, BoughtAlsoBought, CartRecommendation, HomePageTopSeller, CategoryTopSeller, PDPPageTopSeller, BrandTopSeller, CompleteTheLook
  public func analyticsBoxType() -> Swift.String
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum PageType : Swift.String {
  case Boolean, CategoryPath, TaxonomyNode, Attribute, Url
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RecsV2PageType : Swift.String {
  case NONE, Home, Category, Brand, Pdp, Cart
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RecsVersion {
  case Version1, Version2
  public static func == (a: Unbxd.RecsVersion, b: Unbxd.RecsVersion) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum Widget : Swift.String {
  case None, Widget1, Widget2, Widget3
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct AutoSuggestQuery {
  public init(withKey: Swift.String, format: Unbxd.ResponseFormat = .JSON, inField: Unbxd.DocTypeInField? = nil, keywordSuggestions: Unbxd.DocTypeKeywordSuggestions? = nil, topQueries: Unbxd.DocTypeTopQueries? = nil, promotedSuggestions: Unbxd.DocTypePromotedSuggestions? = nil, popularProducts: Unbxd.DocTypePopularProducts? = nil, variant: Unbxd.Variant? = nil, filter: Unbxd.FilterAbstract? = nil)
}
@_hasMissingDesignatedInitializers public class DocTypeAbstract {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocTypeInField : Unbxd.DocTypeAbstract {
  public init(resultsCount: Swift.Int = 2)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocTypeKeywordSuggestions : Unbxd.DocTypeAbstract {
  public init(resultsCount: Swift.Int = 2)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocTypeTopQueries : Unbxd.DocTypeAbstract {
  public init(resultsCount: Swift.Int = 2)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocTypePromotedSuggestions : Unbxd.DocTypeAbstract {
  public init(resultsCount: Swift.Int = 2)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocTypePopularProducts : Unbxd.DocTypeAbstract {
  public init(resultsCount: Swift.Int = 2, fields: Swift.Array<Swift.String>? = nil)
  @objc deinit
}
extension UIDevice {
  public static let modelName: Swift.String
}
@_hasMissingDesignatedInitializers public class SearchQuery : Unbxd.QueryAbstract {
  public var searchKey: Swift.String?
  public init(key: Swift.String, rows: Swift.Int? = nil, start: Swift.Int? = nil, format: Unbxd.ResponseFormat = .JSON, spellCheck: Swift.Bool = false, analytics: Swift.Bool = false, statsField: Swift.String? = nil, variant: Unbxd.Variant? = nil, fields: Swift.Array<Swift.String>? = nil, facet: Unbxd.Facet? = nil, filter: Unbxd.FilterAbstract? = nil, categoryFilter: Unbxd.CategoryFilterAbstract? = nil, multipleFilter: Unbxd.MultipleFilterAbstract? = nil, fieldsSortOrder: Swift.Array<Unbxd.FieldSortOrder>? = nil, personalization: Swift.Bool? = nil)
  @objc deinit
}
public struct Variant {
  public init(has: Swift.Bool, count: Swift.Int8? = nil)
}
@_hasMissingDesignatedInitializers public class FilterAbstract {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TextFilter : Unbxd.FilterAbstract {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IdFilter : Unbxd.TextFilter {
  public init(field: Swift.String, value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NameFilter : Unbxd.TextFilter {
  public init(field: Swift.String, value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FilterRangeAbstract : Unbxd.FilterAbstract {
  @objc deinit
}
@_inheritsConvenienceInitializers public class IdFilterRange : Unbxd.FilterRangeAbstract {
  public init(field: Swift.String, lower: Swift.String, upper: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class NameFilterRange : Unbxd.FilterRangeAbstract {
  public init(field: Swift.String, lower: Swift.String, upper: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryFilterAbstract {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryIdFilter : Unbxd.CategoryFilterAbstract {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryNameFilter : Unbxd.CategoryFilterAbstract {
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MultipleFilterAbstract {
  @objc deinit
}
@_inheritsConvenienceInitializers public class MultipleIdFilter : Unbxd.MultipleFilterAbstract {
  public init(filters: Swift.Array<Unbxd.FilterAbstract>, operatorType: Unbxd.FilterOperatorType)
  @objc deinit
}
@_inheritsConvenienceInitializers public class MultipleNameFilter : Unbxd.MultipleFilterAbstract {
  public init(filters: Swift.Array<Unbxd.FilterAbstract>, operatorType: Unbxd.FilterOperatorType)
  @objc deinit
}
public struct FieldSortOrder {
  public init(field: Swift.String, order: Unbxd.SortOrder)
}
@_hasMissingDesignatedInitializers public class RecommendationQuery {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RecommendedForYourRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RecentlyViewedRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoreLikeThisRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViewedAlsoViewedRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BoughtAlsoBoughtRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CartRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HomePageTopSellersRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CategoryTopSellersRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, categoryName: Swift.String? = nil, categoryLevelNames: [Swift.String]? = nil, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PDPTopSellersRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BrandTopSellersRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, brandName: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CompleteTheLookRecomendations : Unbxd.RecommendationQuery {
  public init(uid: Swift.String, productID: Swift.String, region: Swift.String? = nil, currency: Swift.String? = nil, ip: Swift.String? = nil, format: Unbxd.ResponseFormat = ResponseFormat.JSON)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RecommendationsV2 : Unbxd.RecommendationQuery {
  public init(pageType: Unbxd.RecsV2PageType, uid: Swift.String, ip: Swift.String? = nil, widget: Unbxd.Widget = .None, id: Swift.String? = nil, brand: Swift.String? = nil, categoryLevelNames: [Swift.String]? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UserId : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let id: Swift.String
  public var visitType: Swift.String
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
public enum LoggingOption {
  case LogOff, LogDebug, LogError
  public static func == (a: Unbxd.LoggingOption, b: Unbxd.LoggingOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias CompletionHandler = (Swift.Dictionary<Swift.String, Any>?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void
public class Client {
  public init?(siteKey: Swift.String, apiKey: Swift.String, logsOption: Unbxd.LoggingOption = .LogOff)
  @objc deinit
}
extension Unbxd.UbError : Swift.Equatable {}
extension Unbxd.UbError : Swift.Hashable {}
extension Unbxd.UbError : Swift.RawRepresentable {}
extension Unbxd.ResponseFormat : Swift.Equatable {}
extension Unbxd.ResponseFormat : Swift.Hashable {}
extension Unbxd.ResponseFormat : Swift.RawRepresentable {}
extension Unbxd.ReferenceType : Swift.Equatable {}
extension Unbxd.ReferenceType : Swift.Hashable {}
extension Unbxd.FilterOperatorType : Swift.Equatable {}
extension Unbxd.FilterOperatorType : Swift.Hashable {}
extension Unbxd.SortOrder : Swift.Equatable {}
extension Unbxd.SortOrder : Swift.Hashable {}
extension Unbxd.SortOrder : Swift.RawRepresentable {}
extension Unbxd.CategoryType : Swift.Equatable {}
extension Unbxd.CategoryType : Swift.Hashable {}
extension Unbxd.DocType : Swift.Equatable {}
extension Unbxd.DocType : Swift.Hashable {}
extension Unbxd.DocType : Swift.RawRepresentable {}
extension Unbxd.AnalyticsActionType : Swift.Equatable {}
extension Unbxd.AnalyticsActionType : Swift.Hashable {}
extension Unbxd.AnalyticsActionType : Swift.RawRepresentable {}
extension Unbxd.RecommendationType : Swift.Equatable {}
extension Unbxd.RecommendationType : Swift.Hashable {}
extension Unbxd.RecommendationType : Swift.RawRepresentable {}
extension Unbxd.PageType : Swift.Equatable {}
extension Unbxd.PageType : Swift.Hashable {}
extension Unbxd.PageType : Swift.RawRepresentable {}
extension Unbxd.RecsV2PageType : Swift.Equatable {}
extension Unbxd.RecsV2PageType : Swift.Hashable {}
extension Unbxd.RecsV2PageType : Swift.RawRepresentable {}
extension Unbxd.RecsVersion : Swift.Equatable {}
extension Unbxd.RecsVersion : Swift.Hashable {}
extension Unbxd.Widget : Swift.Equatable {}
extension Unbxd.Widget : Swift.Hashable {}
extension Unbxd.Widget : Swift.RawRepresentable {}
extension Unbxd.LoggingOption : Swift.Equatable {}
extension Unbxd.LoggingOption : Swift.Hashable {}
